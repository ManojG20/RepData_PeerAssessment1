if (outcome == 'heart attack') {
death <- as.numeric(data[,11])
} else if (outcome == 'heart failure') {
death <- as.numeric(data[,17])
} else if (outcome == 'pneumonia') {
death <- as.numeric(data[,23])
} else {
stop("invalid outcome")
}
a <- rank(death, na.last=NA)
if (num=="best") {
r <- 1
} else if (num =="worst") {
r <- length(a)
} else if (num <= length(a) ) {
r <- num
} else {
return(NA)
}
return(data$Hospital.Name[order(death, data$Hospital.Name)[r]])
}
rankhospital("MD", "heart attack", "worst")
rankhospital <- function(state, outcome, num){
data <- read.csv("rprog/outcome-of-care-measures.csv", colClasses = "character")
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
states <- unique(data$State)
out <- c('heart attack', 'heart failure', 'pneumonia')
if(!state %in% states){
stop('invalid state')
}
if(!outcome %in% out){
stop('invalid outcome')
}
sdata <- data[grep(state, data$State, ignore.case=T),]
if (outcome == 'heart attack' ) { selector <- 11 }
if (outcome == 'heart failure' ) { selector <- 17 }
if (outcome == 'pneumonia' ) { selector <- 23 }
a <- rank(sdata[,selector], na.last = NA)
if(num == 'best'){
r <- 1
}else if( num == 'worst'){
r <- length(a)
}else if( num <= length(a)){
r <- num
}else{
return(NA)
}
result <- sdata$Hospital.Name[order(sdata[,selector], sdata$Hospital.Name)[r]]
return(result)
}
rankhospital("MD", "heart attack", "worst")
submit()
submit()
submit()
submit()
a <- lapply(split(outcome$State), function(x) rank(outcome[,11], na.last = NA))
a <- lapply(split(outcome,outcome$State), function(x) rank(outcome[,11], na.last = NA))
a
a <- lapply(split(outcome,outcome$State), function(x) rank(outcome[,11], na.last = NA))
class(a)
b <- sapply(split(outcome,outcome$State), function(x) rank(outcome[,11], na.last = NA))
b
names(b)
head(b)
rankall <- function(outcome, num){
data <- read.csv("rprog/outcome-of-care-measures.csv", colClasses = "character")
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
hospital <- rep("", length(state))
states <- sort(unique(data$State))
out <- c('heart attack', 'heart failure', 'pneumonia')
if(!outcome %in% out){
stop('invalid outcome')
}
if (outcome == 'heart attack' ) { selector <- 11 }
if (outcome == 'heart failure' ) { selector <- 17 }
if (outcome == 'pneumonia' ) { selector <- 23 }
for(i in length(states)){
sdata <- data[grep(states[i], data$State, ignore.case=T),]
a <- rank(sdata[,selector], na.last = NA)
if(num == 'best'){
r <- 1
}else if( num == 'worst'){
r <- length(a)
}else if( num <= length(a)){
r <- num
}else{
return(NA)
}
if(is.na == R){
hospital[i] <- NA
}
else{
hospital[i] <- sdata$Hospital.Name[order(sdata[,selector], sdata$Hospital.Name)[r]]
}
}
return(data.frame(hospital=hospital, state=states))
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num){
data <- read.csv("rprog/outcome-of-care-measures.csv", colClasses = "character")
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
hospital <- rep("", length(state))
states <- sort(unique(data$State))
out <- c('heart attack', 'heart failure', 'pneumonia')
if(!outcome %in% out){
stop('invalid outcome')
}
if (outcome == 'heart attack' ) { selector <- 11 }
if (outcome == 'heart failure' ) { selector <- 17 }
if (outcome == 'pneumonia' ) { selector <- 23 }
for(i in length(states)){
sdata <- data[grep(states[i], data$State, ignore.case=T),]
a <- rank(sdata[,selector], na.last = NA)
if(num == 'best'){
r <- 1
}else if( num == 'worst'){
r <- length(a)
}else if( num <= length(a)){
r <- num
}else{
return(NA)
}
if(is.na(r)){
hospital[i] <- NA
}
else{
hospital[i] <- sdata$Hospital.Name[order(sdata[,selector], sdata$Hospital.Name)[r]]
}
}
return(data.frame(hospital=hospital, state=states))
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num){
data <- read.csv("rprog/outcome-of-care-measures.csv", colClasses = "character")
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
hospital <- rep("", length(state))
states <- sort(unique(data$State))
out <- c('heart attack', 'heart failure', 'pneumonia')
if(!outcome %in% out){
stop('invalid outcome')
}
if (outcome == 'heart attack' ) { selector <- 11 }
if (outcome == 'heart failure' ) { selector <- 17 }
if (outcome == 'pneumonia' ) { selector <- 23 }
for(i in length(states)){
sdata <- data[grep(states[i], data$State, ignore.case=T),]
a <- rank(sdata[,selector], na.last = NA)
if(num == 'best'){
r <- 1
}else if( num == 'worst'){
r <- length(a)
}else if( num <= length(a)){
r <- num
}else{
r <- NA
}
if(is.na(r)){
hospital[i] <- NA
}
else{
hospital[i] <- sdata$Hospital.Name[order(sdata[,selector], sdata$Hospital.Name)[r]]
}
}
return(data.frame(hospital=hospital, state=states))
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num){
data <- read.csv("rprog/outcome-of-care-measures.csv", colClasses = "character")
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
hospital <- rep("", length(state))
states <- sort(unique(data$State))
out <- c('heart attack', 'heart failure', 'pneumonia')
if(!outcome %in% out){
stop('invalid outcome')
}
if (outcome == 'heart attack' ) { selector <- 11 }
if (outcome == 'heart failure' ) { selector <- 17 }
if (outcome == 'pneumonia' ) { selector <- 23 }
for(i in length(states)){
sdata <- data[grep(states[i], data$State, ignore.case=T),]
a <- rank(sdata[,selector], na.last = NA)
if(num == 'best'){
r <- 1
}else if( num == 'worst'){
r <- length(a)
}else if( num <= length(a)){
r <- num
}else{
r <- NA
}
if(is.na(r)){
hospital[i] <- NA
}
else{
hospital[i] <- sdata$Hospital.Name[order(sdata[,selector], sdata$Hospital.Name)[r]]
}
}
#return(data.frame(hospital=hospital, state=states))
return(hospital)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num){
data <- read.csv("rprog/outcome-of-care-measures.csv", colClasses = "character")
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
hospital <- rep("", length(state))
states <- sort(unique(data$State))
out <- c('heart attack', 'heart failure', 'pneumonia')
if(!outcome %in% out){
stop('invalid outcome')
}
if (outcome == 'heart attack' ) { selector <- 11 }
if (outcome == 'heart failure' ) { selector <- 17 }
if (outcome == 'pneumonia' ) { selector <- 23 }
for(i in 1:length(states)){
sdata <- data[grep(states[i], data$State, ignore.case=T),]
a <- rank(sdata[,selector], na.last = NA)
if(num == 'best'){
r <- 1
}else if( num == 'worst'){
r <- length(a)
}else if( num <= length(a)){
r <- num
}else{
r <- NA
}
if(is.na(r)){
hospital[i] <- NA
}
else{
hospital[i] <- sdata$Hospital.Name[order(sdata[,selector], sdata$Hospital.Name)[r]]
}
}
#return(data.frame(hospital=hospital, state=states))
return(hospital)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num){
data <- read.csv("rprog/outcome-of-care-measures.csv", colClasses = "character")
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
hospital <- rep("", length(state))
states <- sort(unique(data$State))
out <- c('heart attack', 'heart failure', 'pneumonia')
if(!outcome %in% out){
stop('invalid outcome')
}
if (outcome == 'heart attack' ) { selector <- 11 }
if (outcome == 'heart failure' ) { selector <- 17 }
if (outcome == 'pneumonia' ) { selector <- 23 }
for(i in 1:length(states)){
sdata <- data[grep(states[i], data$State, ignore.case=T),]
a <- rank(sdata[,selector], na.last = NA)
if(num == 'best'){
r <- 1
}else if( num == 'worst'){
r <- length(a)
}else if( num <= length(a)){
r <- num
}else{
r <- NA
}
if(is.na(r)){
hospital[i] <- NA
}
else{
hospital[i] <- sdata$Hospital.Name[order(sdata[,selector], sdata$Hospital.Name)[r]]
}
}
return(data.frame(hospital=hospital, state=states))
}
head(rankall("heart attack", 20), 10)
submit()
submit()
submit()
rankall("heart failure", 10)
submit()
submit()
best <- function(state, outcome){
data <- read.csv("rprog/outcome-of-care-measures.csv", colClasses = "character")
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
data[,11] <- suppressWarnings(as.numeric(data[,11]))
states <- unique(data$State)
out <- c('heart attack', 'heart failure', 'pneumonia')
if(!state %in% states){
stop('invalid state')
}
if(!outcome %in% out){
stop('invalid outcome')
}
sdata <- data[grep(state, data$State, ignore.case=T),]
if (outcome == 'heart attack' ) { selector <- 11 }
if (outcome == 'heart failure' ) { selector <- 17 }
if (outcome == 'pneumonia' ) { selector <- 23 }
sorted <- sdata[order(sdata[,selector],sdata[,2]),]
sorted[1,2]
}
best("NY", "pneumonia")
best <- function(state, outcome) {
oc <- read.csv('outcome-of-care-measures.csv', colClasses = 'character')
oc[,11] <- suppressWarnings(as.numeric(oc[,11]))
oc[,17] <- suppressWarnings(as.numeric(oc[,17]))
oc[,23] <- suppressWarnings(as.numeric(oc[,23]))
#create a list of states for verification
states <- unique(oc$State)
#make a list of outcomes to check for
conditions <- c('heart attack', 'heart failure', 'pneumonia')
if (!state %in% states) { stop('invalid state') }
if (!outcome %in% conditions) { stop('invalid outcome') }
#make a subset, just for that state
soc <- oc[grep(state, oc$State, ignore.case=T),]
#pick a column to select based on the outcome
if (outcome == 'heart attack' ) { selector <- 11 }
if (outcome == 'heart failure' ) { selector <- 17 }
if (outcome == 'pneumonia' ) { selector <- 23 }
sorted <- soc[order(soc[,selector],soc[,2]),]
#sorted <- na.omit(sorted)
sorted[1,2]
}
best("NY", "pneumonia")
best <- function(state, outcome) {
oc <- read.csv('rprog/outcome-of-care-measures.csv', colClasses = 'character')
oc[,11] <- suppressWarnings(as.numeric(oc[,11]))
oc[,17] <- suppressWarnings(as.numeric(oc[,17]))
oc[,23] <- suppressWarnings(as.numeric(oc[,23]))
#create a list of states for verification
states <- unique(oc$State)
#make a list of outcomes to check for
conditions <- c('heart attack', 'heart failure', 'pneumonia')
if (!state %in% states) { stop('invalid state') }
if (!outcome %in% conditions) { stop('invalid outcome') }
#make a subset, just for that state
soc <- oc[grep(state, oc$State, ignore.case=T),]
#pick a column to select based on the outcome
if (outcome == 'heart attack' ) { selector <- 11 }
if (outcome == 'heart failure' ) { selector <- 17 }
if (outcome == 'pneumonia' ) { selector <- 23 }
sorted <- soc[order(soc[,selector],soc[,2]),]
#sorted <- na.omit(sorted)
sorted[1,2]
}
best("NY", "pneumonia")
submit()
submit()
submit()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
install.packages("knitr")
install.packages("knitr", dependencies = TRUE)
read.csv("activity.csv")
data <- read.csv("activity.csv")
names(data)
?unzip
setwd("D:\\test_git\\RepData_PeerAssessment1")
unzip("activity.zip")
read.csv("activity.zip")
read.csv("activity.csv")
ls()
?unz
fileName <- "activity.csv"
if(file.exixt(fileName)){
print("File is Present")
}
if(file.exixts(fileName)){
print("File is Present")
}
if(file.exists(fileName)){
print("File is Present")
}
names(data)
str(data)
head(data)
dat <- read.csv("activity.csv")
dat$date <- as.Dat(data$date)
dat$date <- as.Date(dat$date)
str(dat)
str(data)
str(data)
```
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
* Dataset used for this Assessment (activity.zip) is present in the forked git repository.
* Lets load the csv file if already uncompressed, else lets unzip the "activity.zip" and load the dataset.
```{r Loading_Data, echo = TRUE}
fileName <- "activity.csv"
if(file.exists(fileName)){
data <- read.csv(fileName)
}else{
unzip("activity.zip")
data <- read.csv(fileName)
}
```
* The date column is converted to Date type
* The inverval column is converted to factor type.
```{r Preprocessing, echo = TRUE}
data$date <- as.Date(data$date) #Converting data column to Date type
data$inverval <- as.factor(data$interval) #Converting interval column to factor type
```
## What is mean total number of steps taken per day?
## What is the average daily activity pattern?
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
data$interval <- as.factor(data$interval) #Converting interval column to factor type
data$date <- as.Date(data$date) #Converting data column to Date type
str(data)
data$inverval <- NULL
str(data)
dt <- data.table(dat)
install.packages("data.table", dependencies = TRUE)
steps_per_day <- aggregate(steps ~ date, dat, sum)
hist(steps_per_day)
steps_per_day
steps_per_day$steps
hist(steps_per_day)
hist(steps_per_day$steps)
hist(steps_per_day$steps)
?hsit
?hist
hist(steps_per_day$steps, breaks = 1000)
hist(steps_per_day$steps)
hist(steps_per_day$steps, col = "green")
mean(steps_per_day$steps)
median(steps_per_day$steps)
print("Mean: ", mean(steps_per_day$steps))
print("Mean: "+ mean(steps_per_day$steps))
?print
library(ggplot2)
steps_per_interval <- aggregate(interval ~ steps, mean)
steps_per_interval <- aggregate(interval ~ steps, data, mean)
warnings()
?aggregate
steps_per_interval <- aggregate(interval ~ steps, data, mean, na.action = na.omit)
steps_per_interval <- aggregate(steps ~ interval, data, mean)
plot(stpes_per_interval, type = "l")
plot(stpes_per_interval$steps, steps_per_interval$interval, type = "l")
names(steps_per_interval)
plot(steps_per_interval$interval, steps_per_interval$stpes, type = "l")
plot(steps_per_interval$steps, type = "l")
plot(steps_per_interval$steps, speps_per_interval$interval, type = "l")
plot(steps_per_interval$steps, steps_per_interval$interval, type = "l")
plot(steps_per_interval$interval, steps_per_interval$steps, type = "l")
plot(steps_per_interval$interval, steps_per_interval$steps, type = "l")
plot(steps_per_interval$interval, steps_per_interval$steps)
plot(steps_per_interval$interval, steps_per_interval$steps, type = "l")
plot(as.numeric(steps_per_interval$interval), steps_per_interval$steps, type = "l")
nrow(steps_per_interval)
plot(steps_per_interval$stpes, type = "l", main = "Timeseries of Daily Pattern", xlab = "Average stpes per interval")
plot(steps_per_interval$stpes, type = "l")
plot(steps_per_interval$steps, type = "l")
steps_per_iterval[steps_per_interval$stpes == max(steps_per_interval$stpes),1]
steps_per_interval[steps_per_interval$stpes == max(steps_per_interval$stpes),1]
steps_per_interval[max(steps_per_interval$stpes),1]
max(steps_per_interval$steps)
steps_per_interval[max(steps_per_interval$steps),1]
steps_per_interval[max(steps_per_interval$steps),]
data[is.na(data$steps)]
data[is.na(data$steps),]
data[is.na(data$steps),] <- 0
data
head(data)
data[is.na(data$steps),] <- 0
steps <- data$steps
steps
steps[is.na(steps)] <- 0
steps
data$weekday <- as.factor(weekdays(data$date))
data$weekday
weekend_data <- subset(data, weekday %in% c("Saturday","Sunday"))
weekend_data <- subset(data, !weekday %in% c("Saturday","Sunday"))
ifelse(data$weekday %in% c("Saturday", "Sunday"),  data$day <- "Weekend", data$day <- "Weekday")
names(data)
plot(weeday_data$steps, type = l)
?supress
?suppress
xyplot(steps | day, data = data)
library(lattice)
xyplot(steps | day, data = data)
```
ifelse(data$weekday %in% c("Saturday", "Sunday"),  data$day <- "Weekend", data$day <- "Weekday")
data$day
par(mfrow = c(1,2))
names(data)
?lapply
?sapply
dat <- data
dat$day <- NA
names(dat)
summary(dat$day)
dat[weekday %in% c("Saturday", "Sunday"),5] <- "Weekend"
dat[dat$weekday %in% c("Saturday", "Sunday"),5] <- "Weekend"
summary(dat$day)
table(dat$day)
dat[!dat$weekday %in% c("Saturday", "Sunday"),5] <- "Weekday"
table(dat$day)
dat$day <- as.factor(dat$day)
table(dat$day)
summary(dat$day)
